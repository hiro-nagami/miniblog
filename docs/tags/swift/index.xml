<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Techree</title>
    <link>https://www.techree.net/tags/swift/</link>
    <description>Recent content in Swift on Techree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Dec 2019 13:05:57 +0900</lastBuildDate>
    
	<atom:link href="https://www.techree.net/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Swiftui 06</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-06/</link>
      <pubDate>Sat, 07 Dec 2019 13:05:57 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-06/</guid>
      <description> @EnvironmentObjectについて .environmentObject(env) 修飾子を呼び出したプロパティでは @EnvironmentObject を適用したプロパティに自動的に値を取得するようになる。Viewの階層の中で、Initで引数を渡すことなく参照することができるようになる。 dynamic member lookup の機能によりObservableObjectを見つけてくれる。
 struct ToggleSampleView: View { @EnvironmentObject var toggleSample: ToggleSampleModel var body: some View { List { Toggle(isOn: $toggleSample.isToggleOn) { Text(&amp;quot;sample&amp;quot;) } if (toggleSample.isToggleOn) { Circle().foregroundColor(.blue) Circle().foregroundColor(.blue) } } } } struct ToggleSampleView_preview: PreviewProvider { static var previews: some View { ToggleSampleView().environmentObject(ToggleSampleModel()) } }  </description>
    </item>
    
    <item>
      <title>Learning Swiftui 05</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-05/</link>
      <pubDate>Sat, 07 Dec 2019 02:11:22 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-05/</guid>
      <description>ゴール SwiftUIで使われいるBindingについて理解する
現状 先日@Stateについては少し理解したが、SwiftUIを使っていると時々Bindingプロパティを要求されることがあるが理解できていない。
Stateプロパティについて Viewはstructのため値を変更できないが、@StateをつけることによってSwiftUI側でメモリ管理を移譲することができる。それを利用して値の更新ができるようになる。この変更時に、内部にあるビューを再構築してくれる。この値は外部から変更することができない。
SwiftUIのObservableについて ObservableObject プロトコルに適合していると @ObservedObject を宣言したプロパティへ変更通知することができる。監視したいプロパティに @Published を宣言すると自動で変更を監視してくれる。
 final class ToggleSampleModel: ObservableObject { @Published var isToggleOn = false }  Property Wrappersについて @ を仕様した宣言をすることで独自のアクセスを提供する。@State @ObservedObject @Published などがあげられる。
参考 https://qiita.com/shiz/items/6eaf87fa79499623306a https://developer.apple.com/videos/play/wwdc2019/226/</description>
    </item>
    
    <item>
      <title>Learning Swiftui 03</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-03/</link>
      <pubDate>Wed, 27 Nov 2019 02:06:27 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-03/</guid>
      <description>データモデルをビューに流し込み表示 リスト化ようのModelとRowを作る 参考にするのは、こちら リストにデータを流し込むためのモデルを作る
struct Data { let name: String let image: Image }  Rowビューをつくる
struct Row: View { var data: Data var body: some View { data.image .resizable() .frame(width: 50, height: 50) Text(landmark.name) } }  Rowビューにデータモデルを流し込んで表示する
struct Row_Previews: PreviewProvider { static var previews: some View { Row(landmark: datalist[0]) } }  プレビューで複数のRowを表示 プレビューを複数表示するにはGroupを使う GroupはContainer Viewというものに含まれる
https://developer.apple.com/documentation/swiftui/view_layout_and_presentation
struct Row_Previews: PreviewProvider { static var previews: some View { Group { Row(landmark: datalist[0]) .</description>
    </item>
    
    <item>
      <title>Learning Swiftui 02</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-02/</link>
      <pubDate>Wed, 13 Nov 2019 19:05:56 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-02/</guid>
      <description>SwiftUI便利コマンド Command + コンポーネントclickで、コンポーネントに対するショートカットが一覧で表示される。
ショートカットの中からInspectorの表示を選択すると、コンポーネント上にInspectorが表示される。</description>
    </item>
    
    <item>
      <title>Learning Swiftui 04</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-04/</link>
      <pubDate>Wed, 13 Nov 2019 19:05:56 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-04/</guid>
      <description>Imageに色をOvarlayする方法 .foregroundColor()を使って指定できる。
 Image(systemName: &amp;quot;star.fill&amp;quot;) .foregroundColor(.yellow)  Imageのサイズを指定する サイズの指定にはが使える.imageScale()
 Image(systemName: &amp;quot;star.fill&amp;quot;) .imageScale(.medium)  Filterする方法 ForEachについて Listの中身を部分的に動的に変更する場合は、ForEachなどをつかう。また、リストを切り替えるためにToggleを使うことができる。
List { Toggle(isOn: $showFavoritesOnly) { Text(&amp;quot;Favorites only&amp;quot;) } ForEach(landmarkData) { landmark in if !self.showFavoritesOnly || landmark.isFavorite { NavigationLink(destination: LandmarkDetail(landmark: landmark)) { LandmarkRow(landmark: landmark) } } } }  @State プロパティは何か ReactやVueで扱うStateのようなもの？SwiftUIでは、ステートとUIを同期的に処理するために使う。</description>
    </item>
    
    <item>
      <title>Download Oldversion Xcode</title>
      <link>https://www.techree.net/posts/download-oldversion-xcode/</link>
      <pubDate>Sat, 09 Nov 2019 16:38:00 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/download-oldversion-xcode/</guid>
      <description>Xcodeアップデートしたらコンパイラがアップデートしていて動かない Xcodeをアップデートしたら、Swiftのバージョン(5.1.2)に上がっていたためCarthageでビルドしたフレームワークが動かなくなってしまった。
対処法は２つ
 Carthageでビルドし直す。対応したバージョンがリリースされていればそれを使うし、なければローカルで再ビルドされる 元のSwiftバージョン(5.1.0)で使いたいので旧バージョンを落として動かす  とりあえず、元のSwiftバージョン(5.1.0)で使いたいので旧バージョンを落としてきて対処。
古いバージョンを使い続けるのは、技術的な負債になるのでなるべく早くアップデートに対応したい。
https://developer.apple.com/download/more/</description>
    </item>
    
    <item>
      <title>Learning Swiftui 01</title>
      <link>https://www.techree.net/posts/swift/learning-swiftui-01/</link>
      <pubDate>Sun, 03 Nov 2019 17:27:44 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/swift/learning-swiftui-01/</guid>
      <description>SwiftUIについて勉強 SwiftUIの勉強する方法としてApple公式ページにチュートリアルが用意されている。このチュートリアルでは、SwiftUIの使い方や実装手順などが紹介されている。また、サンプルコードなども用意してありダウンロードして自分の環境でテストすることができる。
チュートリアルのページはここ。
また、チュートリアルが終わったり分からないことがあればDocumentのページで詳しい仕様を確認することもできる。</description>
    </item>
    
  </channel>
</rss>