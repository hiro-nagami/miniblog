<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Techree</title>
    <link>https://www.techree.net/tags/ios/</link>
    <description>Recent content in Ios on Techree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Oct 2019 13:13:02 +0900</lastBuildDate>
    
	<atom:link href="https://www.techree.net/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firebase Crashlytics Symbolicate</title>
      <link>https://www.techree.net/posts/firebase-crashlytics-symbolicate/</link>
      <pubDate>Thu, 31 Oct 2019 13:13:02 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/firebase-crashlytics-symbolicate/</guid>
      <description>FirebaseでiOSアプリのクラッシュログを見る クラッシュログを見れるようにするには、dSYMファイルをアップロードする必要がある。dSYMファイルを取得する方法は、以下のページを見るとわかる。
https://www.techree.net/posts/ios-app-debugging-crashreport/</description>
    </item>
    
    <item>
      <title>iOS App Debugging Crashreport</title>
      <link>https://www.techree.net/posts/ios-app-debugging-crashreport/</link>
      <pubDate>Thu, 31 Oct 2019 12:52:50 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/ios-app-debugging-crashreport/</guid>
      <description>AppleなどからもらったクラッシュファイルをSymbolicateする方法は以下の通り。
 クラッシュファイルを手に入れる dSYMを手に入れる symbolicateする  txtファイルの場合 symbol.txt を　symbol.crash　のように拡張子を変更する。
dSYMの取得 App Store ConnectかArchivesから取得する。
 App Store Connect  Activity -&amp;gt; Build Number -&amp;gt; Included Symbols  から取得可能。
 Archives  Archiveのパッケージ内に存在するのでそれを利用する。
Window -&amp;gt; Organizer -&amp;gt; Select Archive -&amp;gt; Show in finder -&amp;gt; Open package  symbolicateする 以下にあるsymbolicatecrashというコマンドを使う。
/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash  適当なフォルダを作り、そこにクラッシュファイルとdSYMを一緒にいれる。
$ cd tmp $ ls symbol.crash app.dSYM framework.dSYM  DEVELOPER_DIRをexportする
$ export DEVELOPER_DIR=&amp;quot;/Applications/Xcode.app/Contents/Developer&amp;quot;  symbolicateにaliasを設定しておくと便利。
alias symbolicate = &amp;quot;/Applications/Xcode.</description>
    </item>
    
    <item>
      <title>iOS App Release Introduction</title>
      <link>https://www.techree.net/posts/app-itunes-release/</link>
      <pubDate>Tue, 29 Oct 2019 14:27:12 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/app-itunes-release/</guid>
      <description>アプリリリースするための手順 アプリをリリースするためには、以下の作業が必要になる。
 App Storeにアプリを登録する 申請用のバイナリをアップロードする アプリレビュー申請  App Storeにアプリを登録する リリースするためにApp Store Connectでアプリを作成する。そのために以下の項目を埋めていく。
 アプリを作成する  App Information  App Storeに表示されるアプリ名 アプリのカテゴリ設定 プライバシーポリシーの設定  テンプレートなどもあるが、可能なら専門の人に作ってもらうのがベスト   Pricing And Availability  課金の設定 リリース前の事前登録の設定  アプリの詳細設定  スクリーンショットの追加  App preview specifications [Xcode] iOS シミュレータで、スクリーンショットを保存する時は、⌘ + S で OK！ Images can&amp;rsquo;t contain alpha channels or transparencies  App Storeに表示するアプリ説明 検索キーワード プライバシーポリシー・サポートサイトの登録 バイナリーのアップロード App Store用アイコン、アプリバージョン、Ratingの設定 コピーライト  著作権表示、コレが正解！「©」や「All Rights Rserved」正しい表記と意味全解説  開発者情報の設定 レビューアカウント情報の設定 自動リリースか手動リリースかの設定   申請用のバイナリをアップロードする アプリを申請するために必要なバイナリのアップロード手順は次の通り。</description>
    </item>
    
    <item>
      <title>iOS Push Notification 01</title>
      <link>https://www.techree.net/posts/ios-push-notification-01/</link>
      <pubDate>Tue, 29 Oct 2019 13:39:45 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/ios-push-notification-01/</guid>
      <description>iOSのプッシュ通知について iOS プッシュ通知の実装方法は大きく分けて３つある。 - AppDelegateメソッドを使う方法 - UserNotificationCenterDelegateメソッドを使う方法 (iOS10~) - NotificationServiceExtensionを使う方法
AppDelegateを使う方法 AppDelegateには、プッシュ通知を受け取る以下のメソッドが用意されている https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623013-application
実装方法 func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&amp;gt; Void) { // アプリがバックグラウンド状態の時に通知を受け取った場合の処理を行う。 completionHandler(UIBackgroundFetchResult.newData) }  UserNotificationCenterを使う方法 UserNotificationCenterDelegateすることで、以下のメソッドでプッシュ通知を受け取ることができる。 https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649518-usernotificationcenter
func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: (UNNotificationPresentationOptions) -&amp;gt; Void) { // Remote Notification if notification.request.trigger is UNPushNotificationTrigger { debugPrint(&amp;quot;プッシュ通知受信&amp;quot;) completionHandler([.sound, .alert]) } else { // ... } } func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: () -&amp;gt; Void) { debugPrint(&amp;quot;opened&amp;quot;) completionHandler() }  NotificationServiceExtensionを使う方法 XcodeプロジェクトからNotificationServiceExtensionを追加することでリッチ通知を実装することができる。 https://developer.</description>
    </item>
    
  </channel>
</rss>