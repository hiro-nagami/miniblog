<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Techree</title>
    <link>https://www.techree.net/tags/docker/</link>
    <description>Recent content in Docker on Techree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 01:24:40 +0900</lastBuildDate>
    
	<atom:link href="https://www.techree.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy on AWS-ECS with Github Actions</title>
      <link>https://www.techree.net/posts/docker/deploy-on-ecs-with-github-actions/</link>
      <pubDate>Sun, 26 Jan 2020 01:24:40 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/docker/deploy-on-ecs-with-github-actions/</guid>
      <description>GitHub Actionsを使ってDockerコンテナをECSにデプロイ GitHub ActionsではAWS用のプラグインが充実しているのでそれを利用する。secretsは、repositoryのsettingsから設定できる。wait-for-service-stability: trueにしているのは、デプロイ完了を待たないようにするため。(サービスを再起動していないので、タスクが上手く更新されないのでタイムアウトする)
on: push: branches: - deploy-* name: Deploy to Amazon ECS jobs: deploy: name: Deploy runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v1 - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v1 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ap-northeast-1 - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@v1 - name: Build, tag, and push image to Amazon ECR id: build-image env: ECR_REGISTRY: ${{ steps.</description>
    </item>
    
    <item>
      <title>Add GD and ImageMagick for PHP-FPM on Docker</title>
      <link>https://www.techree.net/posts/docker/add-gd-and-imagemagick-for-php-fpm-docker/</link>
      <pubDate>Sun, 26 Jan 2020 00:26:34 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/docker/add-gd-and-imagemagick-for-php-fpm-docker/</guid>
      <description> Dockerで alpine: php-fpm にGDとImageMagickを導入 WordPressを設定している時に画像のS3アップロードでGD or ImageMagickが必要になったので導入方法を調べてみた。
GD dockerでalphineイメージを使ってGDを導入する場合は、docker-ext-configure と docker-php-ext-install を使うとphpでも有効になる。またGDを使うには、いくつかimage系のライブラリが必要だった。 --virtual は仮の名前をつけてインストールすることができ、指定した名前を使うことで一括削除することもできる。
RUN apk add --update --no-cache --virtual .ext-deps \ libjpeg-turbo-dev \ libwebp-dev \ libpng-dev \ freetype-dev \ libmcrypt-dev apk del .ext-deps docker-php-ext-configure gd \ --with-jpeg=/usr/include \ --with-webp=/usr/include \ --with-freetype=/usr/include &amp;amp;&amp;amp; \ docker-php-ext-install gd  ImageMagick dockerでalphineイメージを使ってImageMagickを導入する場合は、ImageMagickをPHPに適用する必要がある。適用するには docker-php-ext-enable と imagick を利用する。imagemagickをインストールするのに gcc/g++/autoconf/make が必要になるので、それもインストールする。apk add build-baseコマンドでも解消可能。
RUN apk add --update --no-cache --virtual .imagemagick-deps \ gcc \ g++ \ autoconf \ make &amp;amp;&amp;amp; \ pecl install imagick &amp;amp;&amp;amp; \ docker-php-ext-enable imagick   Dockerなphpの環境でimagickをinstallする PHP &amp;amp; Docker &amp;amp; AlpineLinux な環境でImageMagickを使用する方法（＋Laravelで画像処理をする方法） php-alpineコンテナにxdebugをインストールする時にハマったメモ nginx と PHP-FPM の仕組みをちゃんと理解しながら PHP の実行環境を構築する docker-compose で作る nginx + PHP-FPM7 + HTTP/2 に対応したモダンな WordPress 開発環境 Wordpress(php-fpm)のボトルネックを探る  </description>
    </item>
    
    <item>
      <title>Not Found Oniguruma</title>
      <link>https://www.techree.net/posts/docker/not-found-oniguruma/</link>
      <pubDate>Tue, 21 Jan 2020 18:47:35 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/docker/not-found-oniguruma/</guid>
      <description> Dockerでimageビルドしていたらエラー Dockerビルドしていたら、onigurumaが見つからなくてエラーが出ていた。原因としては、PHP 7.4.0から onigurumaが内包されないようになったかららしい。
Package &#39;oniguruma&#39;, required by &#39;virtual:world&#39;, not found   http://tekitoh-memdhoi.info/views/807 https://qiita.com/ucan-lab/items/14201de8fcf3c5251c12  対策 apkでonigurumaをインストールする
$ apk add --update --no-cache oniguruma-dev  </description>
    </item>
    
  </channel>
</rss>