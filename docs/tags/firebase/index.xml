<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firebase on Techree</title>
    <link>https://www.techree.net/tags/firebase/</link>
    <description>Recent content in Firebase on Techree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Oct 2019 13:13:02 +0900</lastBuildDate>
    
	<atom:link href="https://www.techree.net/tags/firebase/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firebase Crashlytics Symbolicate</title>
      <link>https://www.techree.net/posts/firebase-crashlytics-symbolicate/</link>
      <pubDate>Thu, 31 Oct 2019 13:13:02 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/firebase-crashlytics-symbolicate/</guid>
      <description>FirebaseでiOSアプリのクラッシュログを見る クラッシュログを見れるようにするには、dSYMファイルをアップロードする必要がある。dSYMファイルを取得する方法は、以下のページを見るとわかる。
https://www.techree.net/posts/ios-app-debugging-crashreport/</description>
    </item>
    
    <item>
      <title>Firebase Cloud FunctionのonCall()とonRequest()のトリガーの違い</title>
      <link>https://www.techree.net/posts/on-request-on-call/</link>
      <pubDate>Mon, 17 Jun 2019 09:16:29 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/on-request-on-call/</guid>
      <description> Firebase Cloud FunctionでAPI実装するために使われるトリガーにonCall()とonRequest()との２つがあった。
これらは「内部で行なっていること」と「Callbackで受け取れる値」に違いがある。
onCall()関数 onCall()は、Content-Type: application/jsonヘッダーをPOSTリクエストのみを受け付けるようになっている。また、Authentication Bearerヘッダーを付与しているとJWTを使ったユーザーの検証を自動で行なってくれるため、呼び出された時点で認証情報が利用できるようになる。
JWTの使用についてはこちら。
JWTについて簡単に調べたのでメモ書き
export const hello_on_call = functions.https.onCall((data, context) =&amp;gt; { if (!context.auth) { throw new functions.https.HttpsError(&#39;Invalid account.&#39;); } return &amp;quot;Hello, world&amp;quot; });  https.onCall のプロトコルの仕様
onRequest()関数 onRequest()は、POST以外のどのHTTPメソッドでもハンドリングできるようになっている。なので、呼び出されたタイミングでHTTPメソッドを判断して処理を分ける必要がある。 基本的に、内部でユーザーの検証などはないため自前で実装する必要がある。
export const hello = functions. https.onRequest((request, response) =&amp;gt; { cors(req, res, () =&amp;gt; { const tokenId = req.get(&#39;Authorization&#39;).split(&#39;Bearer &#39;)[1]; return admin.auth().verifyIdToken(tokenId) .then((decoded) =&amp;gt; res.status(200).send(decoded)) .catch((err) =&amp;gt; res.status(401).send(err)); }); });  </description>
    </item>
    
    <item>
      <title>nodeバージョンの違いでFirebase Cloud Functionsのdeployが失敗した話</title>
      <link>https://www.techree.net/posts/cloud-functions-npm-error/</link>
      <pubDate>Sat, 15 Jun 2019 19:33:52 +0900</pubDate>
      
      <guid>https://www.techree.net/posts/cloud-functions-npm-error/</guid>
      <description>nodeのバージョンが違ったことでdeployが失敗 今作っているプロダクトで、Firebase Cloud Functionsを使うことになったので試してみようと以下のプログラムをデプロイしてみた。
import * as functions from &#39;firebase-functions&#39;; export const hello = functions. https.onRequest((request, response) =&amp;gt; { response.send(&amp;quot;Hello, firebase cloud functions&amp;quot;); });  すると、以下の内容の不具合が発生した。
❯ npm run deploy &amp;gt; functions@ deploy ~/functions &amp;gt; firebase deploy --only functions === Deploying to &#39;sample-app&#39;... i deploying functions Running command: npm --prefix $RESOURCE_DIR run lint &amp;gt; functions@ lint ~/functions &amp;gt; tslint -p tslint.json no-use-before-declare is deprecated. Since TypeScript 2.9. Please use the built-in compiler checks instead.</description>
    </item>
    
  </channel>
</rss>